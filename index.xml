<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>秘密</title>
    <link>/</link>
    <description>Recent content on 秘密</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <copyright>&amp;copy; 2020-2022 &lt;a href=&#34;https://www.github.com/werifu/&#34;&gt;Werifu&lt;/a&gt;
</copyright>
    <lastBuildDate>Mon, 07 Nov 2022 22:41:10 +0800</lastBuildDate><atom:link href="/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Note: Data Flow Analysis</title>
      <link>/posts/static-analysis/</link>
      <pubDate>Mon, 07 Nov 2022 22:41:10 +0800</pubDate>
      
      <guid>/posts/static-analysis/</guid>
      <description>Preliminary 什么是 Input 和 Output States 程序是个状态机，在一个语句执行前后都应当有一个状态，保存着比如变量信息、上下文等等的内容，然后语句的执行其实就是状态机的一条边，改变了</description>
    </item>
    
    <item>
      <title>Rust Quiz 记录</title>
      <link>/posts/rust-quiz/</link>
      <pubDate>Wed, 19 Oct 2022 23:30:23 +0800</pubDate>
      
      <guid>/posts/rust-quiz/</guid>
      <description>https://dtolnay.github.io/rust-quiz 因为 Quiz 是乱序的，所以完成进度也是乱序的 Quiz #5: https://dtolnay.github.io/rust-quiz/5 What is the output of this Rust program? trait Trait { fn p(self); } impl&amp;lt;T&amp;gt; Trait for fn(T) { fn p(self) { print!(&amp;quot;1&amp;quot;); } } impl&amp;lt;T&amp;gt; Trait for fn(&amp;amp;T) { fn p(self) { print!(&amp;quot;2&amp;quot;); } } fn f(_: u8) {} fn g(_: &amp;amp;u8) {} fn main() { let a: fn(_) = f;</description>
    </item>
    
    <item>
      <title>Rusty Typescript -- Pattern Matching</title>
      <link>/posts/rusty-typescript-pattern-matching/</link>
      <pubDate>Mon, 12 Sep 2022 18:02:35 +0800</pubDate>
      
      <guid>/posts/rusty-typescript-pattern-matching/</guid>
      <description>本文章内容：使用 TypeScript 实现 Rust 的部分模式匹配特性（match、Option、Result） 标题可以理解为《 Rust 味的 TypeScript 》 阅读须知： 无需 Rust 基础知识，也与 Rust 最难的内</description>
    </item>
    
    <item>
      <title>rCore Camp 2022 Lab4 记录</title>
      <link>/posts/rcore-camp-2022-lab4/</link>
      <pubDate>Sat, 30 Jul 2022 00:29:54 +0800</pubDate>
      
      <guid>/posts/rcore-camp-2022-lab4/</guid>
      <description>rCoreCamp2022-lab4记录 Lab4 本体 lab地址 Lab4 的难度感觉比 Lab3 高了一档，因为之前在学校或者自己学 OS 的时候都基本都没学到文件系统，所以这一张属</description>
    </item>
    
    <item>
      <title>rCore Camp 2022 Lab3 记录</title>
      <link>/posts/rcore-camp-2022-lab3/</link>
      <pubDate>Sat, 23 Jul 2022 00:29:54 +0800</pubDate>
      
      <guid>/posts/rcore-camp-2022-lab3/</guid>
      <description>rCoreCamp2022-lab3记录 Lab3 本体 lab 地址 0. 迁移通过以前的测试 get_time： 原本我给 TCB 加了一个 inner，这部分在第五章里官方加了这个结</description>
    </item>
    
    <item>
      <title>rCore Camp 2022 Lab2 记录</title>
      <link>/posts/rcore-camp-2022-lab2/</link>
      <pubDate>Mon, 18 Jul 2022 00:29:54 +0800</pubDate>
      
      <guid>/posts/rcore-camp-2022-lab2/</guid>
      <description>rCoreCamp2022-lab2记录 Lab2 本体 lab地址 1. 重写 sys_get_time 之前 sys_get_time 失效的原因是现在增加了虚拟内存的设定，而获取时间靠的是参数传入指针来赋值，这样 ts</description>
    </item>
    
    <item>
      <title>rCore Camp 2022 Lab1 记录</title>
      <link>/posts/rcore-camp-2022-lab1/</link>
      <pubDate>Thu, 14 Jul 2022 01:20:44 +0800</pubDate>
      
      <guid>/posts/rcore-camp-2022-lab1/</guid>
      <description>rCoreCamp2022-lab1记录 Lab1本体 lab地址 实现以下函数的功能 fn sys_task_info(ti: *mut TaskInfo) -&amp;gt; isize struct TaskInfo { status: TaskStatus, syscall_times: [u32; MAX_SYSCALL_NUM], time: usize } 分解需求 让 TASK_MANAGER 有获取 task 状态的能力 让 TASK_MANAGER 有</description>
    </item>
    
    <item>
      <title>计算机组成设计-软件硬件接口-RISC-V版笔记</title>
      <link>/posts/riscv_memo/</link>
      <pubDate>Mon, 11 Jul 2022 01:37:38 +0800</pubDate>
      
      <guid>/posts/riscv_memo/</guid>
      <description>chap 1. 计算机抽象及相关技术 八个伟大思想： 面向摩尔定律的设计 设计芯片的时候要考虑未来工艺，需要超前点 使用抽象简化设计 加速经常性事件 通过并行提高性能 通过流水</description>
    </item>
    
    <item>
      <title>SourceMap与JS反调试</title>
      <link>/posts/sourcemap-js-anti-debugging/</link>
      <pubDate>Thu, 28 Oct 2021 18:40:44 +0800</pubDate>
      
      <guid>/posts/sourcemap-js-anti-debugging/</guid>
      <description>这篇文是2021秋的一次联创web组内分享 SourceMap是什么 发送到前端的代码往往不是写的时候的样子 为了方便调试，在SourceMap文件中规定了</description>
    </item>
    
    <item>
      <title>Chapter 1</title>
      <link>/docs/example-doc/chapter-1/</link>
      <pubDate>Fri, 16 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>/docs/example-doc/chapter-1/</guid>
      <description>&lt;p&gt;This is chapter 1 of example doc.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Chapter 1</title>
      <link>/docs/example-doc/nested-chapter/chapter-1/</link>
      <pubDate>Fri, 16 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>/docs/example-doc/nested-chapter/chapter-1/</guid>
      <description>&lt;p&gt;This is chapter 1 of nested chapter.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Chapter 2</title>
      <link>/docs/example-doc/chapter-2/</link>
      <pubDate>Fri, 16 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>/docs/example-doc/chapter-2/</guid>
      <description>&lt;p&gt;This is chapter 2 of example doc.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Chapter 2</title>
      <link>/docs/example-doc/nested-chapter/chapter-2/</link>
      <pubDate>Fri, 16 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>/docs/example-doc/nested-chapter/chapter-2/</guid>
      <description>&lt;p&gt;This is chapter 2 of nested chapter.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>秘封</title>
      <link>/doujins/%E7%A7%98%E5%B0%8120-05-30/</link>
      <pubDate>Sat, 30 May 2020 00:00:00 +0000</pubDate>
      
      <guid>/doujins/%E7%A7%98%E5%B0%8120-05-30/</guid>
      <description></description>
    </item>
    
  </channel>
</rss>
